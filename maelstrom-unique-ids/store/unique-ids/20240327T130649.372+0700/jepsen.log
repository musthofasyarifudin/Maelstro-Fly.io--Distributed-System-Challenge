2024-03-27 13:06:49,397{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w unique-ids --bin /root/go/bin/maelstrom-unique-ids --time-limit 30 --rate 1000 --node-count 3 --availability total --nemesis partition
2024-03-27 13:06:49,477{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 3
 :availability :total
 :max-txn-length 4
 :concurrency 3
 :db
 #object[maelstrom.db$db$reify__16142
         "0x60a3a0fa"
         "maelstrom.db$db$reify__16142@60a3a0fa"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "unique-ids"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x704c3ca2" "2024-03-27T13:06:49.372+07:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x7d3a9061"
         "maelstrom.net$jepsen_net$reify__15251@7d3a9061"]
 :client
 #object[maelstrom.workload.unique_ids$client$reify__20074
         "0x2a2f7a61"
         "maelstrom.workload.unique_ids$client$reify__20074@2a2f7a61"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x8d40f07"
         "java.util.concurrent.CyclicBarrier@8d40f07"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 1000.0
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x196c8b93"
         "jepsen.checker$compose$reify__11881@196c8b93"]
 :argv
 ("test"
  "-w"
  "unique-ids"
  "--bin"
  "/root/go/bin/maelstrom-unique-ids"
  "--time-limit"
  "30"
  "--rate"
  "1000"
  "--node-count"
  "3"
  "--availability"
  "total"
  "--nemesis"
  "partition")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@307ca947"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@61d1315b"]})
 :nodes ["n0" "n1" "n2"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "/root/go/bin/maelstrom-unique-ids"
 :generator
 (jepsen.generator.TimeLimit
  {:limit 30000000000,
   :cutoff nil,
   :gen (jepsen.generator.Any
         {:gens [(jepsen.generator.OnThreads
                  {:f #{:nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x11736ebc"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@11736ebc"],
                   :gen (jepsen.generator.Stagger
                         {:dt 20000000000,
                          :next-time nil,
                          :gen (jepsen.generator.FlipFlop
                                {:gens [#object[jepsen.nemesis.combined$partition_package$start__16420
                                                "0x4a03c4bc"
                                                "jepsen.nemesis.combined$partition_package$start__16420@4a03c4bc"]
                                        ({:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         ...)],
                                 :i 0})})})
                 (jepsen.generator.OnThreads
                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x5aad4194"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@5aad4194"],
                   :gen (jepsen.generator.Stagger
                         {:dt 2000000,
                          :next-time nil,
                          :gen (jepsen.generator.Repeat
                                {:remaining -1, :gen {:f :generate}})})})]})})
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0x50a1c2f3"
         "maelstrom.net$jepsen_os$reify__15254@50a1c2f3"]
 :time-limit 30
 :workload :unique-ids
 :consistency-models [:strict-serializable]
 :topology :grid}

2024-03-27 13:06:51,729{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2024-03-27 13:06:51,732{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2024-03-27 13:06:51,736{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2024-03-27 13:06:51,738{GMT}	INFO	[jepsen node n2] maelstrom.db: Setting up n2
2024-03-27 13:06:51,738{GMT}	INFO	[jepsen node n1] maelstrom.db: Setting up n1
2024-03-27 13:06:51,740{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2024-03-27 13:06:51,744{GMT}	INFO	[jepsen node n2] maelstrom.process: launching /root/go/bin/maelstrom-unique-ids []
2024-03-27 13:06:51,744{GMT}	INFO	[jepsen node n1] maelstrom.process: launching /root/go/bin/maelstrom-unique-ids []
2024-03-27 13:06:51,745{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2024-03-27 13:06:51,750{GMT}	INFO	[jepsen node n0] maelstrom.process: launching /root/go/bin/maelstrom-unique-ids []
2024-03-27 13:06:51,804{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2024-03-27 13:06:51,829{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	:minority-third
2024-03-27 13:06:51,829{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:generate	nil
2024-03-27 13:06:51,829{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:generate	nil
2024-03-27 13:06:51,829{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:generate	nil
2024-03-27 13:06:51,836{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	[:isolated {"n2" #{}, "n1" #{}, "n0" #{}}]
2024-03-27 13:06:51,839{GMT}	WARN	[n0 stdout] maelstrom.process: Error!
clojure.lang.ExceptionInfo: Node n0 printed a line to STDOUT which was not well-formed JSON:
3d56f564-e9a7-431f-9325-2b1dcd5b0886
Did you mean to encode this line as JSON? Or was this line intended for STDERR? See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$parse_msg$fn__15856.invoke(process.clj:47)
	at maelstrom.process$parse_msg.invokeStatic(process.clj:45)
	at maelstrom.process$parse_msg.invoke(process.clj:35)
	at maelstrom.process$stdout_thread$fn__15878$fn__15879$fn__15881.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__15878$fn__15879.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__15878.invoke(process.clj:140)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-03-27 13:06:51,839{GMT}	WARN	[n1 stdout] maelstrom.process: Error!
clojure.lang.ExceptionInfo: Node n1 printed a line to STDOUT which was not well-formed JSON:
73bfa73c-2447-4ed9-bbe2-04f6be6954e2
Did you mean to encode this line as JSON? Or was this line intended for STDERR? See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$parse_msg$fn__15856.invoke(process.clj:47)
	at maelstrom.process$parse_msg.invokeStatic(process.clj:45)
	at maelstrom.process$parse_msg.invoke(process.clj:35)
	at maelstrom.process$stdout_thread$fn__15878$fn__15879$fn__15881.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__15878$fn__15879.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__15878.invoke(process.clj:140)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-03-27 13:06:51,839{GMT}	WARN	[n2 stdout] maelstrom.process: Error!
clojure.lang.ExceptionInfo: Node n2 printed a line to STDOUT which was not well-formed JSON:
7e727257-c4d4-4124-8cce-e0b818391691
Did you mean to encode this line as JSON? Or was this line intended for STDERR? See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$parse_msg$fn__15856.invoke(process.clj:47)
	at maelstrom.process$parse_msg.invokeStatic(process.clj:45)
	at maelstrom.process$parse_msg.invoke(process.clj:35)
	at maelstrom.process$stdout_thread$fn__15878$fn__15879$fn__15881.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__15878$fn__15879.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__15878.invoke(process.clj:140)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
2024-03-27 13:06:56,834{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:info	:generate	nil	:net-timeout
2024-03-27 13:06:56,834{GMT}	INFO	[jepsen worker 2] jepsen.util: 5	:invoke	:generate	nil
2024-03-27 13:06:56,837{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:info	:generate	nil	:net-timeout
2024-03-27 13:06:56,838{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:info	:generate	nil	:net-timeout
2024-03-27 13:06:56,838{GMT}	INFO	[jepsen worker 1] jepsen.util: 4	:invoke	:generate	nil
2024-03-27 13:06:56,840{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:invoke	:generate	nil
2024-03-27 13:07:01,835{GMT}	INFO	[jepsen worker 2] jepsen.util: 5	:info	:generate	nil	:net-timeout
2024-03-27 13:07:01,836{GMT}	INFO	[jepsen worker 2] jepsen.util: 8	:invoke	:generate	nil
2024-03-27 13:07:01,839{GMT}	INFO	[jepsen worker 1] jepsen.util: 4	:info	:generate	nil	:net-timeout
2024-03-27 13:07:01,840{GMT}	INFO	[jepsen worker 1] jepsen.util: 7	:invoke	:generate	nil
2024-03-27 13:07:01,841{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:info	:generate	nil	:net-timeout
2024-03-27 13:07:01,842{GMT}	INFO	[jepsen worker 0] jepsen.util: 6	:invoke	:generate	nil
2024-03-27 13:07:06,836{GMT}	INFO	[jepsen worker 2] jepsen.util: 8	:info	:generate	nil	:net-timeout
2024-03-27 13:07:06,837{GMT}	INFO	[jepsen worker 2] jepsen.util: 11	:invoke	:generate	nil
2024-03-27 13:07:06,841{GMT}	INFO	[jepsen worker 1] jepsen.util: 7	:info	:generate	nil	:net-timeout
2024-03-27 13:07:06,842{GMT}	INFO	[jepsen worker 1] jepsen.util: 10	:invoke	:generate	nil
2024-03-27 13:07:06,842{GMT}	INFO	[jepsen worker 0] jepsen.util: 6	:info	:generate	nil	:net-timeout
2024-03-27 13:07:06,843{GMT}	INFO	[jepsen worker 0] jepsen.util: 9	:invoke	:generate	nil
2024-03-27 13:07:06,982{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	nil
2024-03-27 13:07:06,983{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	:network-healed
2024-03-27 13:07:11,838{GMT}	INFO	[jepsen worker 2] jepsen.util: 11	:info	:generate	nil	:net-timeout
2024-03-27 13:07:11,839{GMT}	INFO	[jepsen worker 2] jepsen.util: 14	:invoke	:generate	nil
2024-03-27 13:07:11,843{GMT}	INFO	[jepsen worker 1] jepsen.util: 10	:info	:generate	nil	:net-timeout
2024-03-27 13:07:11,844{GMT}	INFO	[jepsen worker 0] jepsen.util: 9	:info	:generate	nil	:net-timeout
2024-03-27 13:07:11,845{GMT}	INFO	[jepsen worker 1] jepsen.util: 13	:invoke	:generate	nil
2024-03-27 13:07:11,846{GMT}	INFO	[jepsen worker 0] jepsen.util: 12	:invoke	:generate	nil
2024-03-27 13:07:16,839{GMT}	INFO	[jepsen worker 2] jepsen.util: 14	:info	:generate	nil	:net-timeout
2024-03-27 13:07:16,840{GMT}	INFO	[jepsen worker 2] jepsen.util: 17	:invoke	:generate	nil
2024-03-27 13:07:16,846{GMT}	INFO	[jepsen worker 0] jepsen.util: 12	:info	:generate	nil	:net-timeout
2024-03-27 13:07:16,846{GMT}	INFO	[jepsen worker 1] jepsen.util: 13	:info	:generate	nil	:net-timeout
2024-03-27 13:07:16,846{GMT}	INFO	[jepsen worker 0] jepsen.util: 15	:invoke	:generate	nil
2024-03-27 13:07:16,846{GMT}	INFO	[jepsen worker 1] jepsen.util: 16	:invoke	:generate	nil
2024-03-27 13:07:21,840{GMT}	INFO	[jepsen worker 2] jepsen.util: 17	:info	:generate	nil	:net-timeout
2024-03-27 13:07:21,847{GMT}	INFO	[jepsen worker 1] jepsen.util: 16	:info	:generate	nil	:net-timeout
2024-03-27 13:07:21,847{GMT}	INFO	[jepsen worker 0] jepsen.util: 15	:info	:generate	nil	:net-timeout
2024-03-27 13:07:21,901{GMT}	INFO	[jepsen test runner] jepsen.core: Run complete, writing
2024-03-27 13:07:22,017{GMT}	INFO	[jepsen node n1] maelstrom.db: Tearing down n1
2024-03-27 13:07:22,017{GMT}	INFO	[jepsen node n0] maelstrom.db: Tearing down n0
2024-03-27 13:07:22,017{GMT}	INFO	[jepsen node n2] maelstrom.db: Tearing down n2
2024-03-27 13:07:23,753{GMT}	INFO	[jepsen node n0] maelstrom.net: Shutting down Maelstrom network
2024-03-27 13:07:23,763{GMT}	INFO	[jepsen test runner] jepsen.core: Analyzing...
2024-03-27 13:07:24,135{GMT}	INFO	[jepsen test runner] jepsen.core: Analysis complete
2024-03-27 13:07:24,149{GMT}	INFO	[jepsen results] jepsen.store: Wrote /mnt/e/project/maelstrom/maelstrom-unique-ids/store/unique-ids/20240327T130649.372+0700/results.edn
2024-03-27 13:07:24,402{GMT}	INFO	[jepsen test runner] jepsen.core: {:perf {:latency-graph {:valid? true},
        :rate-graph {:valid? true},
        :valid? true},
 :timeline {:valid? true},
 :exceptions {:valid? true},
 :stats {:valid? false,
         :count 18,
         :ok-count 0,
         :fail-count 0,
         :info-count 18,
         :by-f {:generate {:valid? false,
                           :count 18,
                           :ok-count 0,
                           :fail-count 0,
                           :info-count 18}}},
 :availability {:valid? false, :ok-fraction 0.0},
 :net {:all {:send-count 24,
             :recv-count 24,
             :msg-count 24,
             :msgs-per-op 1.3333334},
       :clients {:send-count 24, :recv-count 24, :msg-count 24},
       :servers {:send-count 0,
                 :recv-count 0,
                 :msg-count 0,
                 :msgs-per-op 0.0},
       :valid? true},
 :workload {:valid? true,
            :attempted-count 18,
            :acknowledged-count 0,
            :duplicated-count 0,
            :duplicated {},
            :range [nil nil]},
 :valid? false}


Analysis invalid! (ﾉಥ益ಥ）ﾉ ┻━┻
